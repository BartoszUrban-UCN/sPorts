@model IEnumerable<WebApplication.Models.Marina>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

@* Initialize map showing available and unavailable spots *@

<div id="mapid" style="height: 600px; width: 700px"></div>
<script src="~/js/leaflet_map.js"></script>
<script>mymap.setView([56.2639, 9.5018], 7)</script>

@* End of initialization *@

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Facilities)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MarinaOwner)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Location)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Location.Latitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Location.Longitude)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            // If a Marina does not have a custom location, but it was populated with spots before,
            // it means that a preview location can be deducted based on its spots' locations
            // (Take note that a marina ONLY loaded spots that have a location)
            // (Check MarinaService GetAll method)
            if (item.LocationId == null && item.Spots.Count > 0)
            {
                WebApplication.BusinessLogic.MarinaService.CalculateMarinaLocation(item);
            }

            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Facilities)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MarinaOwner.MarinaOwnerId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address.AddressId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LocationId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Location.Latitude)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Location.Longitude)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.MarinaId">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.MarinaId">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.MarinaId">Delete</a>

                    @if (item.Location != null)
                    {
                        <script>
                            var marinaPopup = '\
                                <div class="text-center" style="width: 100px">\
                                    <p style="font-weight: bold">@item.Name</p>\
                                    <a href="Marina/Details/@item.MarinaId" class="btn btn-primary text-white">Details</a>\
                                </div>\
                            ';

                            L.circle([@item.Location.Latitude, @item.Location.Longitude], {
                                color: 'pink',
                                fillColor: '#f03',
                                fillOpacity: 0.5,
                                radius: @item.Location.Radius,
                            }).bindPopup(marinaPopup).openTooltip().addTo(mymap);
                        </script>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
